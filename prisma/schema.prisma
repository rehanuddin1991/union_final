generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum FiscalYear {
  Y2022_2023
  Y2023_2024
  Y2024_2025
  Y2025_2026
  Y2026_2027
  Y2027_2028
  Y2028_2029
  Y2029_2030
  Y2031_2032
  Y2032_2033
  Y2033_2034
  Y2034_2035
}

enum Designation {
  OFFICER_IN_CHARGE
  CHAIRMAN
  ADMINISTRATIVE_OFFICER
  ACCOUNTANT_COMPUTER_OPERATOR
  UP_MEMBER
  GRAM_POLICE
  ENTREPRENEUR
  OTHERS
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  role           Role           @default(USER)
  is_deleted     Boolean        @default(false) // ✅ added
  createdAt      DateTime       @default(now())
  loginHistories LoginHistory[] // ✅ added this line
 insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)
  @@map("user")
}

model Holding_Information {
  id               Int                 @id @default(autoincrement())
  headName         String
  ward             String?
  holdingNo        String
  father           String
  mother           String
  nid              String              @unique
  mobile           String
  dob              DateTime
  gender           Gender              @default(MALE)
  occupation       String
  maleMembers      String?
  femaleMembers    String?
  othersMembers    String?
  maleBaby         String?
  femaleBaby       String?
  othersBaby       String?
  address          String
  religion          String?
  comments          String?
  rawRoom String?
  area             String
  multiStoriedRoom String?
  buildingRoom     String?
  semiBuildingRoom String?
  
  ownHouseRent     String?
  othersRent       String?
  imposedTax       String?
  collections      HoldingCollection[]
  is_deleted       Boolean             @default(false) // ✅ added
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)

  @@unique([ward, holdingNo])
  @@map("holding_information")
}

model HoldingCollection {
  id                   Int        @id @default(autoincrement())
  holdingInformationId Int
  holdingNumber        String
  fiscalYear           FiscalYear @default(Y2025_2026)
  amount               String?
  paymentDate          DateTime
  is_deleted           Boolean    @default(false) // ✅ added
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  comments          String?
  currentAmount String?
  dueAmount String?
  insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)

  holdingInformation Holding_Information @relation(fields: [holdingInformationId], references: [id])

  @@index([holdingInformationId])
  @@map("holdingcollection")
}

model Employees {
  id          Int         @id @default(autoincrement())
  name        String
  mobile      String?
  email       String?
  notes       String?     @db.Text
  order       Int         @default(1)
  designation Designation @default(CHAIRMAN)
  is_deleted  Boolean     @default(false) // ✅ added
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  imageUrl    String?
    userId     Int  @default(0)
    insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)


  @@map("employees")
}

model OfficeSettings {
  id           Int      @id @default(autoincrement())
  union_name   String?
  upazila      String?
  district     String?
  letter_count String?
  notes        String?  @db.Text
  sarok_no     String?
  imageUrl     String?
  is_deleted   Boolean  @default(false) // ✅ added
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("officesettings")
}

model Poor {
  id         Int      @id @default(autoincrement())
  name       String
  father     String?
  mother     String?
  nid        String?
  mobile     String?
  ward       String?
  address    String?
  comments   String?  @db.Text
  is_deleted Boolean  @default(false) // ✅ added
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)

  @@map("poor")
}

model MasterRole {
  id         Int      @id @default(autoincrement())
  type       String?
  name       String?
  father     String?
  mother     String?
  nid        String?
  mobile     String?
  ward       String?
  address    String?
  comments   String?  @db.Text
  is_deleted Boolean  @default(false) // ✅ added
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)

  @@map("masterrole")
}

model Certificate {
  id                Int        @id @default(autoincrement())
  type              String // নাগরিক সনদ, জাতীয়তা সনদ, ইত্যাদি
  applicantName     String
  fatherName        String?
  motherName        String?
  spouse            String?
  birth_no          String?
  mobile          String?
  email String?
  tin          String?
  passport          String?
  nature          String?
  autoGenNum String?
   businessStartDate         DateTime?
  trade_name        String?
  trade_address     String?
  trade_fee         String?
  trade_capital_tax String?
  trade_due         String?
  trade_vat         String?
  trade_total_tax   String?
  trade_type        String?
  fiscalYear        FiscalYear @default(Y2025_2026)
  fiscalYearEnd     FiscalYear @default(Y2025_2026)
  birthDate         DateTime?
 
  address           String?
  nid               String?
  ward              String?
  mouza             String?
  post_office       String?
  entry_page        String?
  holding_no        String?
  letter_count      Int        @default(0)
  issuedDate        DateTime   @default(now())
  notes             String?    @db.Text
  is_deleted        Boolean    @default(false) // ✅ added
  is_approved       Boolean    @default(false) // ✅ added
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)

  @@map("certificate")
}

model Daily_Collection {
  id          Int       @id @default(autoincrement())
  team        String // নাগরিক সনদ, জাতীয়তা সনদ, ইত্যাদি
  receipt     String
  total_taka  String?
  total_cost  String?
  date        DateTime?
  area        String?
  comments    String?
  gram_police String?
  is_deleted  Boolean   @default(false) // ✅ added
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("daily_collection")
}

model Institution {
  id         Int      @id @default(autoincrement())
  type       String
  name       String
  head       String
  address    String
  headMobile String
  comments   String?  @db.Text
  is_deleted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)

  @@map("institutions")
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
  status    String // "SUCCESS", "FAILURE"
}


model Project {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  status      ProjectStatus  @default(PROPOSED)
  startDate   DateTime?
  endDate     DateTime?
  comments    String?
  is_deleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)
}

enum ProjectStatus {
  PROPOSED
  ONGOING
  COMPLETE
  OTHERS
}

model Inheritance {
  id               Int             @id @default(autoincrement())
  name             String
  fatherName       String
  motherName       String
  nidOrBirth       String
  permanentAddress String
  presentAddress   String
  applicantName    String
  applicantAddress String
  issuedDate        DateTime   @default(now())
  createdAt        DateTime        @default(now())
  is_deleted       Boolean         @default(false)
  letter_count String?
   insertedBy     Int  @default(0)
    updatedBy     Int  @default(0)
    deletedBy     Int  @default(0)
  children         ChildRelation[]
}

model ChildRelation {
  id                 Int         @id @default(autoincrement())
  inheritance        Inheritance @relation(fields: [inheritanceId], references: [id])
  inheritanceId      Int
  name               String
  fatherOrHusbandName String
  village            String
  relation           String
  age                String
  notes              String?
}



//npx prisma migrate dev --name add_spouse_field
//npx prisma generate
