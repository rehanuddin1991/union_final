"use client";
import { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import "react-toastify/dist/ReactToastify.css";

export default function IncomeExpensePage() {
  const [loading, setLoading] = useState(false);
  const [records, setRecords] = useState([]);
  const [editingId, setEditingId] = useState(null);

  const [form, setForm] = useState({
    type: "INCOME",
    title: "",
    amount: "",
    date: new Date(),
    notes: "",
  });

  const fetchRecords = async () => {
    setLoading(true);
    try {
      const res = await fetch("/api/income-expenses");
      const data = await res.json();
      if (data.success) {
        setRecords(data.records);
      } else {
        toast.error("‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•");
      }
    } catch {
      toast.error("‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRecords();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    if (!form.title || form.title.trim() === "") {
      toast.error("‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá");
      setLoading(false);
      return;
    }
    if (!form.amount || isNaN(Number(form.amount))) {
      toast.error("‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá");
      setLoading(false);
      return;
    }

    const method = editingId ? "PATCH" : "POST";
    const url = editingId
      ? `/api/income-expenses?id=${editingId}`
      : "/api/income-expenses";

    try {
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ...form,
          amount: parseFloat(form.amount),
          date: form.date,
        }),
      });
      const data = await res.json();
      if (data.success) {
        toast.success(editingId ? "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá" : "‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§");
        setForm({
          type: "INCOME",
          title: "",
          amount: "",
          date: new Date(),
          notes: "",
        });
        setEditingId(null);
        fetchRecords();
      } else {
        toast.error("‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•");
      }
    } catch {
      toast.error("‡¶è‡¶∞‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (!confirm("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?")) return;
    const res = await fetch(`/api/income-expenses?id=${id}`, {
      method: "DELETE",
    });
    const data = await res.json();
    if (data.success) {
      toast.success("‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá");
      fetchRecords();
    }
  };

  const handleEdit = (rec) => {
    setForm({
      type: rec.type,
      title: rec.title,
      amount: rec.amount,
      date: new Date(rec.date),
      notes: rec.notes || "",
    });
    setEditingId(rec.id);
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      {/* Form */}
      <form
        onSubmit={handleSubmit}
        className="bg-gradient-to-br from-white via-green-50 to-green-100 p-8 rounded-2xl shadow-2xl border border-green-200 mb-8"
      >
        <h2 className="text-3xl font-extrabold mb-6 text-green-800">
          {editingId ? "‚úèÔ∏è ‡¶Ü‡ßü-‡¶¨‡ßç‡¶Ø‡ßü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü" : "üìù ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ü‡ßü-‡¶¨‡ßç‡¶Ø‡ßü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"}
        </h2>

        {/* ‡¶ü‡¶æ‡¶á‡¶™ */}
        <label className="block mb-1 font-medium text-green-700">
          ‡¶ß‡¶∞‡¶® <span className="text-red-600">*</span>
        </label>
        <select
          value={form.type}
          onChange={(e) => setForm({ ...form, type: e.target.value })}
          className="w-full p-3 mb-4 border border-green-200 rounded-xl focus:ring-2 focus:ring-green-400"
        >
          <option value="INCOME">‡¶Ü‡ßü</option>
          <option value="EXPENSE">‡¶¨‡ßç‡¶Ø‡ßü</option>
        </select>

        {/* ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ */}
        <label className="block mb-1 font-medium text-green-700">
          ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ <span className="text-red-600">*</span>
        </label>
        <input
          type="text"
          value={form.title}
          onChange={(e) => setForm({ ...form, title: e.target.value })}
          className="w-full p-3 mb-4 border border-green-200 rounded-xl"
          placeholder="‡ß©‡¶ü‡¶ø ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï, ‡ß®‡¶ü‡¶ø ‡¶ü‡ßç‡¶∞‡ßá‡¶°, ‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡¶æ‡¶¨‡¶æ‡¶¶"
        />

        {/* ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ */}
        <label className="block mb-1 font-medium text-green-700">
          ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ <span className="text-red-600">*(‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ)</span>
        </label>
        <input
          type="text"
          value={form.amount}
           
placeholder="20.25"

          onChange={(e) => {
  let value = e.target.value;

  // ‚úÖ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ (‡ß¶-‡ßØ) ‡¶ï‡ßá ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø (0-9) ‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
  value = value.replace(/[‡ß¶-‡ßØ]/g, (digit) =>
    String("‡ß¶‡ßß‡ß®‡ß©‡ß™‡ß´‡ß¨‡ß≠‡ßÆ‡ßØ".indexOf(digit))
  );

  // ‚úÖ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡¶ü (‡•§) ‡¶ï‡ßá ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶°‡¶ü (.) ‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
  value = value.replace(/‡•§/g, ".");

  // ‚úÖ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶°‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§
  if (/^[0-9]*\.?[0-9]*$/.test(value)) {
    setForm({ ...form, amount: value });
  }
}}

          className="w-full p-3 mb-4 border border-green-200 rounded-xl"
        />

        {/* ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ */}
        <label className="block mb-1 font-medium text-green-700">‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</label>
        <DatePicker
          selected={form.date}
          onChange={(date) => setForm({ ...form, date })}
          dateFormat="yyyy-MM-dd"
          className="w-full p-3 mb-4 border border-green-200 rounded-xl"
        />

        {/* ‡¶®‡ßã‡¶ü‡¶∏ */}
        <label className="block mb-1 font-medium text-green-700">
          ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø (Optional)
        </label>
        <textarea
          value={form.notes}
          onChange={(e) => setForm({ ...form, notes: e.target.value })}
          className="w-full p-3 mb-4 border border-green-200 rounded-xl h-28"
          placeholder="‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï=‡ß®‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ, ‡¶ü‡ßç‡¶∞‡ßá‡¶°=‡ß™‡ß¶‡ß¶, ‡¶π‡ßã‡¶≤‡ßç‡¶°‡¶ø‡¶Ç: ‡¶ï‡¶æ‡¶Å‡¶ö‡¶æ ‡¶ò‡¶∞=‡ß®‡ß¶‡ß¶, ‡¶™‡¶æ‡¶ï‡¶æ ‡¶ò‡¶∞=‡ß™‡ß¶‡ß¶"
        ></textarea>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 rounded-xl font-semibold shadow-lg disabled:opacity-50"
        >
          {loading
            ? editingId
              ? "‚è≥ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
              : "‚è≥ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            : editingId
            ? "‚úÖ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü"
            : "‚úÖ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®"}
        </button>
      </form>

      {/* List */}
      <div className="bg-white border p-4 rounded-xl shadow">
        {loading && (
          <p className="text-center text-green-600">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
        )}
        <h2 className="text-xl font-semibold mb-3">üìã ‡¶Ü‡ßü-‡¶¨‡ßç‡¶Ø‡ßü‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ</h2>
        <table className="w-full text-sm border">
          <thead className="bg-green-100">
            <tr>
              <th className="border p-2">‡¶ß‡¶∞‡¶®</th>
              <th className="border p-2">‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ</th>
              <th className="border p-2">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</th>
              <th className="border p-2">‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</th>
              <th className="border p-2">‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®</th>
            </tr>
          </thead>
          <tbody>
            {records.map((rec) => (
              <tr key={rec.id}>
                <td className="border p-2">
                  {rec.type === "INCOME" ? "‡¶Ü‡ßü" : "‡¶¨‡ßç‡¶Ø‡ßü"}
                </td>
                <td className="border p-2">{rec.title}</td>
                <td className="border p-2">{rec.amount}</td>
                <td className="border p-2">
                  {new Date(rec.date).toLocaleDateString("bn-BD")}
                </td>
                <td className="border p-2">
                  <button
                    onClick={() => handleEdit(rec)}
                    className="text-blue-600 mr-2"
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    onClick={() => handleDelete(rec.id)}
                    className="text-red-600"
                  >
                    üóë
                  </button>
                </td>
              </tr>
            ))}
            {records.length === 0 && (
              <tr>
                <td colSpan={5} className="text-center p-4">
                  ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <ToastContainer position="top-center" autoClose={2000} />
    </div>
  );
}
